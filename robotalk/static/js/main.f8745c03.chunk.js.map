{"version":3,"sources":["delete.jpg","Phrase.js","App.js","index.js"],"names":["Phrase","phrases","index","handleChange","handleDelete","className","type","onChange","e","value","time","text","src","deleteImg","alt","onClick","App","useState","spoken","setPhrases","useStopwatch","autoStart","seconds","isRunning","start","reset","useSpeechSynthesis","speak","supported","resetSpoken","newPhrases","map","curr","target","Number","splice","useEffect","currentIndex","findIndex","phrase","maxTime","reduce","max","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8745c03.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/delete.0c70e24c.jpg\";","import deleteImg from \"./delete.jpg\";\r\nconst Phrase = ({ phrases, index, handleChange, handleDelete }) => {\r\n  return (\r\n    <div className=\"phrase\">\r\n      <input\r\n        className=\"num-input\"\r\n        type=\"number\"\r\n        onChange={(e) => handleChange(index, e)}\r\n        value={phrases[index].time}\r\n      />\r\n      <input\r\n        className=\"text-input\"\r\n        type=\"text\"\r\n        onChange={(e) => handleChange(index, e)}\r\n        value={phrases[index].text}\r\n      />\r\n      <button className=\"delete\">\r\n        <img src={deleteImg} alt=\"delete\" onClick={() => handleDelete(index)} />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Phrase;\r\n","import { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Phrase from \"./Phrase\";\r\nimport { useStopwatch } from \"react-timer-hook\";\r\nimport { useSpeechSynthesis } from \"react-speech-kit\";\r\n\r\nfunction App() {\r\n  const [phrases, setPhrases] = useState([\r\n    { time: 1, text: \"Hi!\", spoken: false },\r\n    { time: 2, text: \"Type your text here.\", spoken: false },\r\n  ]);\r\n  const { seconds, isRunning, start, reset } = useStopwatch({\r\n    autoStart: false,\r\n  });\r\n  const { speak, supported } = useSpeechSynthesis();\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const currentIndex = phrases.findIndex(\r\n        (phrase) => phrase.time === seconds\r\n      );\r\n      if (currentIndex !== -1 && !phrases[currentIndex].spoken) {\r\n        phrases[currentIndex].spoken = true;\r\n        speak(phrases[currentIndex]);\r\n      }\r\n    }\r\n    const maxTime = phrases.reduce(\r\n      (max, curr) => (curr.time > max ? curr.time : max),\r\n      0\r\n    );\r\n    if (seconds > maxTime) {\r\n      reset();\r\n      resetSpoken();\r\n    }\r\n    //check when it's time to shut down\r\n  }, [isRunning, seconds, phrases]);\r\n\r\n  function resetSpoken() {\r\n    const newPhrases = phrases.map((curr) => ({ ...curr, spoken: false }));\r\n    setPhrases(newPhrases);\r\n  }\r\n  function handleChange(index, e) {\r\n    const newPhrases = [...phrases];\r\n    //the number needs some validation\r\n    e.target.type === \"number\" &&\r\n      (newPhrases[index].time = Number(e.target.value));\r\n    newPhrases[index].time < 0 && (newPhrases[index].time = 0);\r\n    e.target.type === \"text\" && (newPhrases[index].text = e.target.value);\r\n\r\n    setPhrases(newPhrases);\r\n  }\r\n\r\n  function handleAdd() {\r\n    const newPhrases =\r\n      phrases.length === 0\r\n        ? [{ time: 1, text: \"Hi!\" }]\r\n        : [\r\n            ...phrases,\r\n            {\r\n              time: phrases[phrases.length - 1].time + 1,\r\n              text: \"\",\r\n              spoken: false,\r\n            },\r\n          ];\r\n    setPhrases(newPhrases);\r\n  }\r\n\r\n  function handleDelete(index) {\r\n    const newPhrases = [...phrases];\r\n    newPhrases.splice(index, 1);\r\n    setPhrases(newPhrases);\r\n  }\r\n\r\n  if (!supported) {\r\n    return \"Your browser doesn't support the SpeechSynthesis API\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"headline\">Time the Robotalk</h1>\r\n      <div className=\"phrases\">\r\n        {phrases.map((phrase, index) => (\r\n          <Phrase\r\n            phrases={phrases}\r\n            index={index}\r\n            key={index}\r\n            handleChange={handleChange}\r\n            handleDelete={handleDelete}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button onClick={handleAdd}>Add</button>\r\n      <h1 className=\"timer\">{seconds}</h1>\r\n      {!isRunning ? (\r\n        <button className=\"start\" onClick={start}>\r\n          Start\r\n        </button>\r\n      ) : (\r\n        <button\r\n          className=\"stop\"\r\n          onClick={() => {\r\n            reset();\r\n            resetSpoken();\r\n          }}\r\n        >\r\n          Stop\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}