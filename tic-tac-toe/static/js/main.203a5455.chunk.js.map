{"version":3,"sources":["components/Button.module.css","components/Board.module.css","components/Start.js","components/ChooseSide.js","components/DrawBoard.js","components/GameOver.js","helpers/constants.js","helpers/functions.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","props","className","styles","buttonContainer","align","onClick","click","startButton","style","margin","handleClick","event","target","attributes","x","value","y","innerText","playerTurn","move","b","board","vert","hori","winner","ORIGINAL_STATE","displayStart","displayChooseSide","playerSide","engineTurn","gameOver","copyMatrix","source","map","row","boardIsFull","isFull","forEach","elem","won","side","checkedChar","console","log","i","h","v","j","fd","sd","App","state","start","setState","handleChooseSide","valueOf","engineMove","setTimeout","worked","engineSide","count","Math","floor","random","checkGameOver","handleMove","playAgain","this","Start","ChooseSide","DrawBoard","GameOver","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.203a5455.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonContainer\":\"Button_buttonContainer__2qkgA\",\"startButton\":\"Button_startButton__1l9Ph\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"vert\":\"Board_vert__1nsF6\",\"hori\":\"Board_hori__k5DqJ\"};","import React from \"react\";\r\nimport styles from \"./Button.module.css\";\r\n\r\nexport default (props) => (\r\n  <div>\r\n    Let's play a game of Tic Tac Toe\r\n    <div className={styles.buttonContainer} align=\"center\">\r\n      <div onClick={props.click} className={styles.startButton}>\r\n        Choose your side\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport styles from \"./Button.module.css\";\r\n\r\nexport default (props) => (\r\n  <div>\r\n    Which would you like to be?\r\n    <div className={styles.buttonContainer} align=\"center\">\r\n      <div onClick={props.click} className={styles.startButton}>\r\n        X\r\n      </div>\r\n      <div\r\n        onClick={props.click}\r\n        className={styles.startButton}\r\n        style={{ margin: \"0 0 0 40px\" }}\r\n      >\r\n        0\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport styles from \"./Board.module.css\";\r\n\r\nexport default (props) => {\r\n  const handleClick = (event) => {\r\n    const [x, y] = [\r\n      event.target.attributes.x.value,\r\n      event.target.attributes.y.value,\r\n    ];\r\n    //only make a move if user clicked on an empty square and it's his turn\r\n    //otherwise, we won't bother sending this up, because this isn't game logic, it's just UI behavior\r\n    !event.target.innerText && props.playerTurn && props.move(x, y);\r\n  };\r\n\r\n  const b = props.board;\r\n  return (\r\n    <div className={styles.board}>\r\n      <h1>Tic Tac Toe</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <td x=\"0\" y=\"0\" onClick={handleClick}>\r\n              {b[0][0]}\r\n            </td>\r\n            <td x=\"0\" y=\"1\" onClick={handleClick} className={styles.vert}>\r\n              {b[0][1]}\r\n            </td>\r\n            <td x=\"0\" y=\"2\" onClick={handleClick}>\r\n              {b[0][2]}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td x=\"1\" y=\"0\" onClick={handleClick} className={styles.hori}>\r\n              {b[1][0]}\r\n            </td>\r\n            <td\r\n              x=\"1\"\r\n              y=\"1\"\r\n              onClick={handleClick}\r\n              className={`${styles.vert} ${styles.hori}`}\r\n            >\r\n              {b[1][1]}\r\n            </td>\r\n            <td x=\"1\" y=\"2\" onClick={handleClick} className={styles.hori}>\r\n              {b[1][2]}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td x=\"2\" y=\"0\" onClick={handleClick}>\r\n              {b[2][0]}\r\n            </td>\r\n            <td x=\"2\" y=\"1\" onClick={handleClick} className={styles.vert}>\r\n              {b[2][1]}\r\n            </td>\r\n            <td x=\"2\" y=\"2\" onClick={handleClick}>\r\n              {b[2][2]}\r\n            </td>\r\n          </tr>\r\n        </thead>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./Button.module.css\";\r\n\r\nexport default (props) => (\r\n  <div style={{ margin: \"20px\" }}>\r\n    {!props.winner && <div>It's a draw!</div>}\r\n    {props.winner === \"player\" && <div>You won!</div>}\r\n    {props.winner === \"engine\" && <div>You lost!</div>}\r\n    <div className={styles.buttonContainer} align=\"center\">\r\n      <div onClick={props.click} className={styles.startButton}>\r\n        Play Again\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","export const NUM_ATTEMPTS = 10;\r\n\r\nexport const ORIGINAL_STATE = {\r\n  displayStart: true,\r\n  displayChooseSide: false,\r\n  playerSide: \"\",\r\n  playerTurn: false,\r\n  engineTurn: false,\r\n  gameOver: false,\r\n  winner: \"\",\r\n  board: [\r\n    [\"\", \"\", \"\"],\r\n    [\"\", \"\", \"\"],\r\n    [\"\", \"\", \"\"],\r\n  ],\r\n};\r\n","export const copyMatrix = (source) => {\r\n  return source.map((row) => [...row]);\r\n};\r\n\r\nexport const boardIsFull = (board) => {\r\n  let isFull = true;\r\n  board.forEach((row) => {\r\n    row.forEach((elem) => {\r\n      !elem && (isFull = false);\r\n    });\r\n  });\r\n  return isFull;\r\n};\r\n\r\nexport const won = (side, b, playerSide) => {\r\n  //takes three parameters, the side, the board, and the state.playerSide, and checks if side won on the board supplied\r\n  //this function can be used both to check the actual winner, when the board being supplied is state.board, and\r\n  //whether an engine move is winning, when a local board variable is supplied\r\n  let checkedChar;\r\n  if (side === \"player\" && playerSide) {\r\n    checkedChar = playerSide;\r\n  }\r\n  if (side === \"engine\" && playerSide) {\r\n    checkedChar = playerSide === \"X\" ? \"0\" : \"X\";\r\n  }\r\n  if (!checkedChar) {\r\n    console.log(\"returning false\");\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    let h = 0; //horizontal\r\n    let v = 0; //vertical\r\n    for (let j = 0; j < 3; j++) {\r\n      b[i][j] === checkedChar && h++;\r\n      b[j][i] === checkedChar && v++;\r\n    }\r\n    if (h === 3 || v === 3) return true;\r\n  }\r\n  //check across\r\n  let fd = 0; //first diagonal\r\n  let sd = 0;\r\n  for (let i = 0; i < 3; i++) {\r\n    b[i][i] === checkedChar && fd++;\r\n    b[2 - i][i] === checkedChar && sd++;\r\n  }\r\n  if (fd === 3 || sd === 3) return true;\r\n  return false;\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Start from \"../components/Start\";\nimport ChooseSide from \"../components/ChooseSide\";\nimport DrawBoard from \"../components/DrawBoard\";\nimport GameOver from \"../components/GameOver\";\nimport { ORIGINAL_STATE, NUM_ATTEMPTS } from \"../helpers/constants\";\nimport { copyMatrix, won, boardIsFull } from \"../helpers/functions\";\n\nclass App extends Component {\n  //IMPORTANT: this app will use the capital letter X and the number 0 for Xs and 0s.\n  state = { ...ORIGINAL_STATE, board: copyMatrix(ORIGINAL_STATE.board) };\n\n  start = () => {\n    this.setState({ displayStart: false, displayChooseSide: true });\n  };\n\n  handleChooseSide = (event) => {\n    this.setState(\n      {\n        displayChooseSide: false,\n        playerSide: event.target.innerText,\n        playerTurn: event.target.innerText.valueOf() === \"X\",\n        engineTurn: event.target.innerText.valueOf() === \"0\",\n      },\n      () => {\n        this.state.engineTurn && this.engineMove();\n      }\n    );\n  };\n\n  engineMove = () => {\n    setTimeout(() => {\n      let board = copyMatrix(this.state.board);\n      //check whether the engine is X or 0\n      let engineSide = \"X\";\n      if (this.state.playerSide === \"X\") {\n        engineSide = \"0\";\n      }\n      //I will try to make a random move up to NUM_ATTEMPTS (a global constant) times;\n      //if my random move is not a winner, I forget the move by re-initializing board from state.board, and try again\n      let worked;\n      let winner = false;\n      let count = 0;\n\n      while (count < NUM_ATTEMPTS && !winner) {\n        count++;\n        worked = false;\n        while (!worked) {\n          const x = Math.floor(Math.random() * 3);\n          const y = Math.floor(Math.random() * 3);\n          if (!board[x][y]) {\n            board[x][y] = engineSide;\n            worked = true; //I was able to make a random move\n          }\n        }\n        if (worked) {\n          winner = won(\"engine\", board, this.state.playerSide);\n          if (!winner && count < NUM_ATTEMPTS) {\n            board = copyMatrix(this.state.board);\n            //using copyMatrix because I can't use the ES6 spread operator:\n            //it only clones the first level in a matrix, it copies the second level by reference\n            console.log(\"state: \");\n            console.log(this.state.board);\n            console.log(board);\n          }\n        }\n      }\n      this.setState({ board: board, engineTurn: false, playerTurn: true }, () =>\n        this.checkGameOver()\n      );\n    }, 200);\n  };\n\n  checkGameOver = () => {\n    if (won(\"player\", this.state.board, this.state.playerSide)) {\n      this.setState({ gameOver: true, winner: \"player\" });\n      return true;\n    } else if (won(\"engine\", this.state.board, this.state.playerSide)) {\n      this.setState({ gameOver: true, winner: \"engine\" });\n      return true;\n    } else if (boardIsFull(this.state.board)) {\n      this.setState({ gameOver: true });\n      return true;\n    } else return false;\n  };\n\n  handleMove = (x, y) => {\n    let board = copyMatrix(this.state.board);\n    board[x][y] = this.state.playerSide;\n    this.setState({ board: board, playerTurn: false, engineTurn: true }, () => {\n      !this.checkGameOver() && this.state.engineTurn && this.engineMove();\n    });\n  };\n\n  playAgain = () => {\n    this.setState({\n      ...ORIGINAL_STATE,\n      board: copyMatrix(ORIGINAL_STATE.board),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {this.state.displayStart && <Start click={this.start} />}\n          {this.state.displayChooseSide && (\n            <ChooseSide click={this.handleChooseSide} />\n          )}\n          {this.state.playerSide && (\n            <DrawBoard\n              board={this.state.board}\n              playerTurn={this.state.playerTurn}\n              move={this.handleMove}\n            />\n          )}\n          {this.state.gameOver && (\n            <GameOver click={this.playAgain} winner={this.state.winner} />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}